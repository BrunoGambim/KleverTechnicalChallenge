// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package comment_controller

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommentControllerClient is the client API for CommentController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentControllerClient interface {
	GetAllComments(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CommentController_GetAllCommentsClient, error)
	CreateComment(ctx context.Context, in *CreateCommentDTO, opts ...grpc.CallOption) (*empty.Empty, error)
}

type commentControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentControllerClient(cc grpc.ClientConnInterface) CommentControllerClient {
	return &commentControllerClient{cc}
}

func (c *commentControllerClient) GetAllComments(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CommentController_GetAllCommentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommentController_ServiceDesc.Streams[0], "/KleverTechnicalChallenge.CommentController/GetAllComments", opts...)
	if err != nil {
		return nil, err
	}
	x := &commentControllerGetAllCommentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommentController_GetAllCommentsClient interface {
	Recv() (*GetCommentDTO, error)
	grpc.ClientStream
}

type commentControllerGetAllCommentsClient struct {
	grpc.ClientStream
}

func (x *commentControllerGetAllCommentsClient) Recv() (*GetCommentDTO, error) {
	m := new(GetCommentDTO)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commentControllerClient) CreateComment(ctx context.Context, in *CreateCommentDTO, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KleverTechnicalChallenge.CommentController/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentControllerServer is the server API for CommentController service.
// All implementations must embed UnimplementedCommentControllerServer
// for forward compatibility
type CommentControllerServer interface {
	GetAllComments(*empty.Empty, CommentController_GetAllCommentsServer) error
	CreateComment(context.Context, *CreateCommentDTO) (*empty.Empty, error)
	mustEmbedUnimplementedCommentControllerServer()
}

// UnimplementedCommentControllerServer must be embedded to have forward compatible implementations.
type UnimplementedCommentControllerServer struct {
}

func (UnimplementedCommentControllerServer) GetAllComments(*empty.Empty, CommentController_GetAllCommentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllComments not implemented")
}
func (UnimplementedCommentControllerServer) CreateComment(context.Context, *CreateCommentDTO) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedCommentControllerServer) mustEmbedUnimplementedCommentControllerServer() {}

// UnsafeCommentControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentControllerServer will
// result in compilation errors.
type UnsafeCommentControllerServer interface {
	mustEmbedUnimplementedCommentControllerServer()
}

func RegisterCommentControllerServer(s grpc.ServiceRegistrar, srv CommentControllerServer) {
	s.RegisterService(&CommentController_ServiceDesc, srv)
}

func _CommentController_GetAllComments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommentControllerServer).GetAllComments(m, &commentControllerGetAllCommentsServer{stream})
}

type CommentController_GetAllCommentsServer interface {
	Send(*GetCommentDTO) error
	grpc.ServerStream
}

type commentControllerGetAllCommentsServer struct {
	grpc.ServerStream
}

func (x *commentControllerGetAllCommentsServer) Send(m *GetCommentDTO) error {
	return x.ServerStream.SendMsg(m)
}

func _CommentController_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentControllerServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KleverTechnicalChallenge.CommentController/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentControllerServer).CreateComment(ctx, req.(*CreateCommentDTO))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentController_ServiceDesc is the grpc.ServiceDesc for CommentController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KleverTechnicalChallenge.CommentController",
	HandlerType: (*CommentControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComment",
			Handler:    _CommentController_CreateComment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllComments",
			Handler:       _CommentController_GetAllComments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controllers/comment_controller/comment.proto",
}
