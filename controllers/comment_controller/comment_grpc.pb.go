// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package comment_controller

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlbumControllerClient is the client API for AlbumController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlbumControllerClient interface {
	FindAllAlbums(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllCommentDTO, error)
	CreateAlbum(ctx context.Context, in *CreateCommentDTO, opts ...grpc.CallOption) (*empty.Empty, error)
}

type albumControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewAlbumControllerClient(cc grpc.ClientConnInterface) AlbumControllerClient {
	return &albumControllerClient{cc}
}

func (c *albumControllerClient) FindAllAlbums(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllCommentDTO, error) {
	out := new(GetAllCommentDTO)
	err := c.cc.Invoke(ctx, "/KleverTechnicalChallenge.AlbumController/findAllAlbums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumControllerClient) CreateAlbum(ctx context.Context, in *CreateCommentDTO, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KleverTechnicalChallenge.AlbumController/createAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlbumControllerServer is the server API for AlbumController service.
// All implementations must embed UnimplementedAlbumControllerServer
// for forward compatibility
type AlbumControllerServer interface {
	FindAllAlbums(context.Context, *empty.Empty) (*GetAllCommentDTO, error)
	CreateAlbum(context.Context, *CreateCommentDTO) (*empty.Empty, error)
	mustEmbedUnimplementedAlbumControllerServer()
}

// UnimplementedAlbumControllerServer must be embedded to have forward compatible implementations.
type UnimplementedAlbumControllerServer struct {
}

func (UnimplementedAlbumControllerServer) FindAllAlbums(context.Context, *empty.Empty) (*GetAllCommentDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllAlbums not implemented")
}
func (UnimplementedAlbumControllerServer) CreateAlbum(context.Context, *CreateCommentDTO) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlbum not implemented")
}
func (UnimplementedAlbumControllerServer) mustEmbedUnimplementedAlbumControllerServer() {}

// UnsafeAlbumControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlbumControllerServer will
// result in compilation errors.
type UnsafeAlbumControllerServer interface {
	mustEmbedUnimplementedAlbumControllerServer()
}

func RegisterAlbumControllerServer(s grpc.ServiceRegistrar, srv AlbumControllerServer) {
	s.RegisterService(&AlbumController_ServiceDesc, srv)
}

func _AlbumController_FindAllAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumControllerServer).FindAllAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KleverTechnicalChallenge.AlbumController/findAllAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumControllerServer).FindAllAlbums(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumController_CreateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumControllerServer).CreateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KleverTechnicalChallenge.AlbumController/createAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumControllerServer).CreateAlbum(ctx, req.(*CreateCommentDTO))
	}
	return interceptor(ctx, in, info, handler)
}

// AlbumController_ServiceDesc is the grpc.ServiceDesc for AlbumController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlbumController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KleverTechnicalChallenge.AlbumController",
	HandlerType: (*AlbumControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findAllAlbums",
			Handler:    _AlbumController_FindAllAlbums_Handler,
		},
		{
			MethodName: "createAlbum",
			Handler:    _AlbumController_CreateAlbum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controllers/comment_controller/comment.proto",
}
