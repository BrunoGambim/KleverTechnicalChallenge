// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package upvote_controller

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpvoteControllerClient is the client API for UpvoteController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpvoteControllerClient interface {
	GetUpvoteById(ctx context.Context, in *IdDTO, opts ...grpc.CallOption) (*GetUpvoteDTO, error)
	GetUpvotesByCommentId(ctx context.Context, in *IdDTO, opts ...grpc.CallOption) (UpvoteController_GetUpvotesByCommentIdClient, error)
	CreateUpvote(ctx context.Context, in *CreateUpvoteDTO, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteUpvote(ctx context.Context, in *IdDTO, opts ...grpc.CallOption) (*empty.Empty, error)
}

type upvoteControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewUpvoteControllerClient(cc grpc.ClientConnInterface) UpvoteControllerClient {
	return &upvoteControllerClient{cc}
}

func (c *upvoteControllerClient) GetUpvoteById(ctx context.Context, in *IdDTO, opts ...grpc.CallOption) (*GetUpvoteDTO, error) {
	out := new(GetUpvoteDTO)
	err := c.cc.Invoke(ctx, "/KleverTechnicalChallenge.UpvoteController/GetUpvoteById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upvoteControllerClient) GetUpvotesByCommentId(ctx context.Context, in *IdDTO, opts ...grpc.CallOption) (UpvoteController_GetUpvotesByCommentIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpvoteController_ServiceDesc.Streams[0], "/KleverTechnicalChallenge.UpvoteController/GetUpvotesByCommentId", opts...)
	if err != nil {
		return nil, err
	}
	x := &upvoteControllerGetUpvotesByCommentIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpvoteController_GetUpvotesByCommentIdClient interface {
	Recv() (*GetUpvoteDTO, error)
	grpc.ClientStream
}

type upvoteControllerGetUpvotesByCommentIdClient struct {
	grpc.ClientStream
}

func (x *upvoteControllerGetUpvotesByCommentIdClient) Recv() (*GetUpvoteDTO, error) {
	m := new(GetUpvoteDTO)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *upvoteControllerClient) CreateUpvote(ctx context.Context, in *CreateUpvoteDTO, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KleverTechnicalChallenge.UpvoteController/CreateUpvote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upvoteControllerClient) DeleteUpvote(ctx context.Context, in *IdDTO, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KleverTechnicalChallenge.UpvoteController/DeleteUpvote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpvoteControllerServer is the server API for UpvoteController service.
// All implementations must embed UnimplementedUpvoteControllerServer
// for forward compatibility
type UpvoteControllerServer interface {
	GetUpvoteById(context.Context, *IdDTO) (*GetUpvoteDTO, error)
	GetUpvotesByCommentId(*IdDTO, UpvoteController_GetUpvotesByCommentIdServer) error
	CreateUpvote(context.Context, *CreateUpvoteDTO) (*empty.Empty, error)
	DeleteUpvote(context.Context, *IdDTO) (*empty.Empty, error)
	mustEmbedUnimplementedUpvoteControllerServer()
}

// UnimplementedUpvoteControllerServer must be embedded to have forward compatible implementations.
type UnimplementedUpvoteControllerServer struct {
}

func (UnimplementedUpvoteControllerServer) GetUpvoteById(context.Context, *IdDTO) (*GetUpvoteDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpvoteById not implemented")
}
func (UnimplementedUpvoteControllerServer) GetUpvotesByCommentId(*IdDTO, UpvoteController_GetUpvotesByCommentIdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUpvotesByCommentId not implemented")
}
func (UnimplementedUpvoteControllerServer) CreateUpvote(context.Context, *CreateUpvoteDTO) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpvote not implemented")
}
func (UnimplementedUpvoteControllerServer) DeleteUpvote(context.Context, *IdDTO) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUpvote not implemented")
}
func (UnimplementedUpvoteControllerServer) mustEmbedUnimplementedUpvoteControllerServer() {}

// UnsafeUpvoteControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpvoteControllerServer will
// result in compilation errors.
type UnsafeUpvoteControllerServer interface {
	mustEmbedUnimplementedUpvoteControllerServer()
}

func RegisterUpvoteControllerServer(s grpc.ServiceRegistrar, srv UpvoteControllerServer) {
	s.RegisterService(&UpvoteController_ServiceDesc, srv)
}

func _UpvoteController_GetUpvoteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteControllerServer).GetUpvoteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KleverTechnicalChallenge.UpvoteController/GetUpvoteById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteControllerServer).GetUpvoteById(ctx, req.(*IdDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpvoteController_GetUpvotesByCommentId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IdDTO)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpvoteControllerServer).GetUpvotesByCommentId(m, &upvoteControllerGetUpvotesByCommentIdServer{stream})
}

type UpvoteController_GetUpvotesByCommentIdServer interface {
	Send(*GetUpvoteDTO) error
	grpc.ServerStream
}

type upvoteControllerGetUpvotesByCommentIdServer struct {
	grpc.ServerStream
}

func (x *upvoteControllerGetUpvotesByCommentIdServer) Send(m *GetUpvoteDTO) error {
	return x.ServerStream.SendMsg(m)
}

func _UpvoteController_CreateUpvote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUpvoteDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteControllerServer).CreateUpvote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KleverTechnicalChallenge.UpvoteController/CreateUpvote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteControllerServer).CreateUpvote(ctx, req.(*CreateUpvoteDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpvoteController_DeleteUpvote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteControllerServer).DeleteUpvote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KleverTechnicalChallenge.UpvoteController/DeleteUpvote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteControllerServer).DeleteUpvote(ctx, req.(*IdDTO))
	}
	return interceptor(ctx, in, info, handler)
}

// UpvoteController_ServiceDesc is the grpc.ServiceDesc for UpvoteController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpvoteController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KleverTechnicalChallenge.UpvoteController",
	HandlerType: (*UpvoteControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUpvoteById",
			Handler:    _UpvoteController_GetUpvoteById_Handler,
		},
		{
			MethodName: "CreateUpvote",
			Handler:    _UpvoteController_CreateUpvote_Handler,
		},
		{
			MethodName: "DeleteUpvote",
			Handler:    _UpvoteController_DeleteUpvote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUpvotesByCommentId",
			Handler:       _UpvoteController_GetUpvotesByCommentId_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controllers/upvote_controller/upvote.proto",
}
